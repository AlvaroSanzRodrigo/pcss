#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int centerX = SCREEN_WIDTH / 2;
int centerY = SCREEN_HEIGHT / 2;
int radius = 8;
int dotCount = 8;
int dotRadius = 1;

const uint8_t bitmap[] PROGMEM= {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
   0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
   0x7f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x0f, 0xe0, 0x01, 0x60, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x0f,
   0xf0, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x40, 0xbf, 0x00, 0x00, 0x20,
   0x00, 0x00, 0x00, 0x08, 0x30, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x40,
   0xa1, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x18, 0x30, 0x66, 0x07,
   0x8f, 0x1d, 0x00, 0x40, 0xa1, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x09,
   0x18, 0x30, 0xe6, 0x8f, 0x9f, 0x3f, 0x00, 0x40, 0xbf, 0x00, 0x00, 0x04,
   0x00, 0x00, 0x00, 0x09, 0x18, 0x20, 0x62, 0xcc, 0x98, 0x33, 0x00, 0x40,
   0x80, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x18, 0x60, 0x63, 0xcc,
   0x9f, 0x01, 0x00, 0x40, 0xa2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,
   0x38, 0x62, 0x61, 0xcc, 0x80, 0x01, 0x00, 0x40, 0x87, 0x00, 0x00, 0x04,
   0x00, 0x20, 0x00, 0x09, 0xf0, 0xc3, 0xe1, 0xc7, 0x9f, 0x01, 0x00, 0x40,
   0x92, 0x00, 0x00, 0x04, 0x00, 0xf8, 0x00, 0x09, 0xe0, 0xc1, 0xe1, 0x03,
   0x9f, 0x01, 0x00, 0x40, 0x80, 0x00, 0x00, 0x64, 0x00, 0x24, 0x01, 0x09,
   0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0xc4,
   0x00, 0x24, 0x00, 0x09, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x80, 0x00, 0x00, 0x84, 0x01, 0x24, 0x00, 0x09, 0x00, 0x38, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x04, 0x03, 0xf8, 0x00, 0x09,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
   0x06, 0x20, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x04, 0x03, 0x20, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x01, 0x24, 0x01, 0x09,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4,
   0x00, 0xf8, 0x00, 0x09, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00,
   0x78, 0x00, 0x00, 0x64, 0x00, 0x20, 0x00, 0x09, 0xf8, 0x07, 0x00, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,
   0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x04,
   0xff, 0xff, 0x07, 0x09, 0xc0, 0xc0, 0x63, 0xc7, 0xbf, 0x0f, 0x3f, 0x7c,
   0x60, 0x00, 0x00, 0x04, 0xff, 0xff, 0x07, 0x09, 0xc0, 0xe0, 0xe7, 0xcf,
   0xbf, 0x0f, 0x7f, 0xfc, 0x60, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f,
   0xc0, 0x30, 0xe6, 0xcc, 0x36, 0x0c, 0x67, 0xc0, 0x60, 0x00, 0x00, 0x04,
   0x00, 0x00, 0x00, 0x01, 0xc0, 0xf0, 0x67, 0xc0, 0x36, 0x0c, 0x63, 0xfc,
   0x60, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x30, 0x60, 0xc0,
   0x36, 0x0c, 0x63, 0xc6, 0x60, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x01,
   0xc0, 0xf0, 0x67, 0xc0, 0xb6, 0x3f, 0x63, 0xfe, 0xf8, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x67, 0xc0, 0xb6, 0x3f, 0x63, 0xfc,
   0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

String data[5] = {"N/A", "N/A", "N/A", "N/A", "N/A"};

void setup() {
  Serial.begin(9600);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    while(1);
  }
  // Set the duration of the animation in milliseconds
  int animationDuration = 3000; 
  unsigned long startTime = millis();

  // ANIMATION
  while (millis() - startTime < animationDuration) {
    display.clearDisplay();
    display.display(); // Display the black frame
    for (int i = 0; i < dotCount; i++) {
      float angle = -PI / 2 + 2 * PI * i / dotCount; // starting angle is -PI/2
      int x = centerX + radius * cos(angle);
      int y = centerY + radius * sin(angle);

      display.fillCircle(x, y, dotRadius, WHITE);
      display.display();
      delay(100);
    }
  }
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
}
void readSerial() {
  for (int i = 0; i < 5; i++) {
    String value = Serial.readStringUntil(',');  //read until timeout
    value.trim();
    data[i] = value;
  }
}
void displayLogo() {
  display.clearDisplay();
  display.drawXBitmap(0, 0, bitmap, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  display.display();
}
void displayData() {
  display.clearDisplay(); // clear display
  display.setCursor(0, 0);
  display.println("CPU:" + data[0] + "C" + data[1] + "%");
  display.println("GPU:" + data[2] + "C" + data[3] + "%");
  display.println("RAM:" + data[4] + "%");
  display.display();
}
void useDisplay(){
  if(data[0] == "N/A") {
    displayLogo();
  } else {
    displayData();
  }
}
void loop() {
    useDisplay();
    while (Serial.available() != 0) {
      readSerial();
    }
}